

plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {

}

loom {
	splitEnvironmentSourceSets()

	mods {
		"lan-world-discord-integration" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}
configurations {
	implementation.extendsFrom(shadow)  // So shadow dependencies included in implementation
}
dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	shadow "com.discord4j:discord4j-core:3.3.0-RC2"
	shadow "com.electronwill.night-config:toml:3.6.0"
}
remapJar {
	dependsOn shadowJar
	input.set(shadowJar.archiveFile)
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}



shadowJar {
	configurations = [project.configurations.shadow]

	def relocateBase = "${project.group}.shadow"

	relocate('discord4j', "${relocateBase}.discord4j")
	relocate('reactor', "${relocateBase}.reactor")
	relocate('org.reactivestreams', "${relocateBase}.org.reactivestreams")
	relocate('com.electronwill.nightconfig', "${relocateBase}.nightconfig")
	relocate 'io.netty', 'net.backslashtrash.shadow.netty'
	exclude 'META-INF/services/**'  // Avoid possible conflicts with services
}


// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {

	}
}